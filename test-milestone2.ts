/**
 * Test f√∂r Milestone 2 - Verifiera att alla funktioner fungerar
 * K√∂r denna fil f√∂r att testa mastery engine, analytics och storage
 */

import { masteryEngine } from './lib/mastery.js'
import { analyticsEngine } from './lib/analytics.js'
import { storageManager, userProfileManager } from './lib/storage.js'
import { formatDuration, getMasteryColor, getMasteryText } from './lib/utils.js'

// Test data
const testUserId = 'test-user-123'
const testSkillId = 'variabler-uttryck'
const testSubjectId = 'matematik'

console.log('üß™ Testar Milestone 2 funktioner...\n')

// Test 1: Mastery Engine
console.log('1Ô∏è‚É£ Testar Mastery Engine...')
try {
  // Skapa en test attempt
  const testAttempt = {
    id: 'attempt-1',
    itemId: 'item-1',
    skillId: testSkillId,
    userId: testUserId,
    answer: 'x + 5',
    isCorrect: true,
    timestamp: new Date(),
    timeSpent: 15000 // 15 sekunder
  }

  // Processa attempt
  const masteryState = masteryEngine.processAttempt(testAttempt)
  console.log('‚úÖ Mastery state skapad:', {
    probability: masteryState.probability,
    attempts: masteryState.attempts,
    isMastered: masteryState.isMastered
  })

  // Testa mastery level
  const level = masteryEngine.getMasteryLevel(testSkillId, testUserId)
  console.log('‚úÖ Mastery level:', level)

  // Testa mastery percentage
  const percentage = masteryEngine.getMasteryPercentage(testSkillId, testUserId)
  console.log('‚úÖ Mastery percentage:', percentage + '%')

} catch (error) {
  console.error('‚ùå Mastery Engine fel:', error)
}

// Test 2: Analytics Engine
console.log('\n2Ô∏è‚É£ Testar Analytics Engine...')
try {
  // Starta session
  const sessionId = analyticsEngine.startSession(testUserId, testSubjectId, testSkillId)
  console.log('‚úÖ Session startad:', sessionId)

  // Starta practice
  analyticsEngine.startPractice(testUserId, testSkillId)
  console.log('‚úÖ Practice startad')

  // Logga item answered
  analyticsEngine.itemAnswered(testUserId, 'item-1', testSkillId, true, 15000)
  console.log('‚úÖ Item answered loggat')

  // Logga skill mastered
  analyticsEngine.skillMastered(testUserId, testSkillId, 0.9)
  console.log('‚úÖ Skill mastered loggat')

  // H√§mta user analytics
  const analytics = analyticsEngine.getUserAnalytics(testUserId)
  console.log('‚úÖ User analytics:', {
    totalSessions: analytics.totalSessions,
    totalItems: analytics.totalItems,
    accuracy: analytics.accuracy.toFixed(1) + '%'
  })

  // Avsluta session
  analyticsEngine.endSession(sessionId)
  console.log('‚úÖ Session avslutad')

} catch (error) {
  console.error('‚ùå Analytics Engine fel:', error)
}

// Test 3: Storage Manager
console.log('\n3Ô∏è‚É£ Testar Storage Manager...')
try {
  // Testa storage availability
  const isAvailable = storageManager.isAvailable()
  console.log('‚úÖ Storage available:', isAvailable)

  // Testa set/get item
  const testData = { name: 'Test', value: 42 }
  const saved = storageManager.setItem('test-data', testData)
  console.log('‚úÖ Data sparat:', saved)

  const loaded = storageManager.getItem('test-data')
  console.log('‚úÖ Data laddad:', loaded)

  // Testa storage info
  const storageInfo = storageManager.getStorageInfo()
  console.log('‚úÖ Storage info:', {
    available: storageInfo.available,
    used: Math.round(storageInfo.used / 1024) + ' KB'
  })

} catch (error) {
  console.error('‚ùå Storage Manager fel:', error)
}

// Test 4: User Profile Manager
console.log('\n4Ô∏è‚É£ Testar User Profile Manager...')
try {
  // H√§mta profil
  const profile = userProfileManager.getProfile()
  console.log('‚úÖ Profil h√§mtad:', {
    name: profile.name,
    level: profile.level,
    totalXP: profile.totalXP
  })

  // L√§gg till XP
  const xpAdded = userProfileManager.addXP(100)
  console.log('‚úÖ XP tillagt:', xpAdded)

  // Uppdatera profil
  const updated = userProfileManager.updateProfile({ name: 'Test Student' })
  console.log('‚úÖ Profil uppdaterad:', updated)

} catch (error) {
  console.error('‚ùå User Profile Manager fel:', error)
}

// Test 5: Utility Functions
console.log('\n5Ô∏è‚É£ Testar Utility Functions...')
try {
  // Testa duration formatting
  const duration = formatDuration(125000) // 2 min 5 sek
  console.log('‚úÖ Duration format:', duration)

  // Testa mastery color
  const color = getMasteryColor(85)
  console.log('‚úÖ Mastery color:', color)

  // Testa mastery text
  const text = getMasteryText(85)
  console.log('‚úÖ Mastery text:', text)

} catch (error) {
  console.error('‚ùå Utility Functions fel:', error)
}

// Test 6: Spaced Repetition
console.log('\n6Ô∏è‚É£ Testar Spaced Repetition...')
try {
  // Testa f√∂r engelska (ska anv√§nda spaced repetition)
  const shouldUseSpaced = masteryEngine.shouldUseSpacedRepetition('basic-vocabulary', 'engelska')
  console.log('‚úÖ Spaced repetition f√∂r engelska:', shouldUseSpaced)

  // Testa f√∂r matematik (ska INTE anv√§nda spaced repetition)
  const shouldNotUseSpaced = masteryEngine.shouldUseSpacedRepetition('variabler-uttryck', 'matematik')
  console.log('‚úÖ Spaced repetition f√∂r matematik:', shouldNotUseSpaced)

  // Schemal√§gg spaced repetition
  const spacedItem = masteryEngine.scheduleSpacedRepetition('basic-vocabulary', testUserId, true)
  console.log('‚úÖ Spaced repetition schemalagd:', {
    interval: spacedItem.interval + ' timmar',
    repetitions: spacedItem.repetitions
  })

} catch (error) {
  console.error('‚ùå Spaced Repetition fel:', error)
}

console.log('\nüéâ Alla Milestone 2 tester slutf√∂rda!')
console.log('\nüìã Sammanfattning av implementerade funktioner:')
console.log('‚úÖ Mastery Engine med p-model (0.5 ‚Üí 0.9)')
console.log('‚úÖ Adaptive difficulty baserat p√• tid och prestation')
console.log('‚úÖ Spaced repetition f√∂r engelska och biologi')
console.log('‚úÖ Analytics tracking (5 event-typer)')
console.log('‚úÖ LocalStorage med error handling')
console.log('‚úÖ User profile med XP och badges')
console.log('‚úÖ Utility functions f√∂r svenska formatering')
console.log('‚úÖ Weakness detection och skill analysis')
console.log('‚úÖ Study streak calculation')
console.log('‚úÖ Data export/import funktionalitet')
